
import Classes.ReservationEntry;
import Classes.RoomEntry;
import Classes.WaitlistEntry;
import Queries.Dates;
import Queries.RoomEntryQueries;
import Queries.Faculty;
import Queries.ReservationEntryQueries;
import Queries.WaitlistEntryQueries;
import java.awt.GridLayout;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneLayout;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author acv
 */
public class RoomSchedulerFrame extends javax.swing.JFrame
{

    
    /**
     * Creates new form RoomSchedulerFrame
     */
    public RoomSchedulerFrame()
    {
        initComponents();
        
        // Load the combo boxes with data.
        rebuildFacultyComboBoxes();
        rebuildDateComboBoxes();
    }
    
    public void rebuildFacultyComboBoxes() {
        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
        statusFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
    }
    
    public void rebuildDateComboBoxes() {
        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDateList().toArray()));
        statusDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDateList().toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        waitlistPanel = new javax.swing.JTabbedPane();
        dateTab = new javax.swing.JPanel();
        dateLabel = new javax.swing.JLabel();
        dateSpinner = new javax.swing.JSpinner();
        addDateButton = new javax.swing.JButton();
        listDateButton = new javax.swing.JButton();
        deleteDateButton = new javax.swing.JButton();
        dateStatusLabel = new javax.swing.JLabel();
        roomTab = new javax.swing.JPanel();
        roomLabel = new javax.swing.JLabel();
        seatLabel = new javax.swing.JLabel();
        seatSpinner = new javax.swing.JSpinner();
        addRoomButton = new javax.swing.JButton();
        listRoomsButton = new javax.swing.JButton();
        deleteRoomButton = new javax.swing.JButton();
        roomStatusLabel = new javax.swing.JLabel();
        roomNameField = new javax.swing.JTextField();
        facultyTab = new javax.swing.JPanel();
        facultyLabel = new javax.swing.JLabel();
        facultyNameField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        listFacultyButton = new javax.swing.JButton();
        deleteFacultyButton = new javax.swing.JButton();
        facultyStatusLabel = new javax.swing.JLabel();
        reserveTab = new javax.swing.JPanel();
        facultyReserveLabel = new javax.swing.JLabel();
        reserveFacultyComboBox = new javax.swing.JComboBox<>();
        dateReserveLabel = new javax.swing.JLabel();
        reserveDateComboBox = new javax.swing.JComboBox<>();
        seatReserveLabel = new javax.swing.JLabel();
        seatReserveSpinner = new javax.swing.JSpinner();
        reserveSubmitButton = new javax.swing.JButton();
        reserveStatusLabel = new javax.swing.JLabel();
        statusTab = new javax.swing.JPanel();
        statusFacultyLabel = new javax.swing.JLabel();
        statusFacultyComboBox = new javax.swing.JComboBox<>();
        statusDateLabel = new javax.swing.JLabel();
        statusDateComboBox = new javax.swing.JComboBox<>();
        statusSubmitFacultyButton = new javax.swing.JButton();
        statusSubmitDateButton = new javax.swing.JButton();
        statusSubmitButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        reservationStatusLabel = new javax.swing.JLabel();
        reservationScrollPane = new javax.swing.JScrollPane();
        waitlistStatusLabel = new javax.swing.JLabel();
        waitlistScrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        title.setForeground(new java.awt.Color(204, 0, 0));
        title.setText("Room Scheduler");

        dateLabel.setText("Date:");

        dateSpinner.setModel(new javax.swing.SpinnerDateModel());

        addDateButton.setText("Add Date");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        listDateButton.setText("List Dates");
        listDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listDateButtonActionPerformed(evt);
            }
        });

        deleteDateButton.setText("Delete Date");
        deleteDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDateButtonActionPerformed(evt);
            }
        });

        dateStatusLabel.setText("    ");
        dateStatusLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout dateTabLayout = new javax.swing.GroupLayout(dateTab);
        dateTab.setLayout(dateTabLayout);
        dateTabLayout.setHorizontalGroup(
            dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(dateTabLayout.createSequentialGroup()
                        .addComponent(dateLabel)
                        .addGroup(dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dateTabLayout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(deleteDateButton)
                                .addGap(18, 18, 18)
                                .addComponent(listDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addDateButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dateTabLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(32, 32, Short.MAX_VALUE))
        );
        dateTabLayout.setVerticalGroup(
            dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDateButton)
                    .addComponent(deleteDateButton)
                    .addComponent(listDateButton))
                .addGap(18, 18, 18)
                .addComponent(dateStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addContainerGap())
        );

        waitlistPanel.addTab("Dates", dateTab);

        roomLabel.setText("Room Name: ");

        seatLabel.setText("Seats Available:");

        addRoomButton.setText("Add Room");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        listRoomsButton.setText("List Rooms");
        listRoomsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRoomsButtonActionPerformed(evt);
            }
        });

        deleteRoomButton.setText("Delete Room");
        deleteRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoomButtonActionPerformed(evt);
            }
        });

        roomStatusLabel.setText("    ");
        roomStatusLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        roomNameField.setColumns(20);

        javax.swing.GroupLayout roomTabLayout = new javax.swing.GroupLayout(roomTab);
        roomTab.setLayout(roomTabLayout);
        roomTabLayout.setHorizontalGroup(
            roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomTabLayout.createSequentialGroup()
                        .addComponent(roomLabel)
                        .addGap(18, 18, 18)
                        .addComponent(roomNameField)
                        .addContainerGap())
                    .addGroup(roomTabLayout.createSequentialGroup()
                        .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(roomStatusLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(roomTabLayout.createSequentialGroup()
                                .addComponent(seatLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomTabLayout.createSequentialGroup()
                                        .addComponent(deleteRoomButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(listRoomsButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(addRoomButton))
                                    .addComponent(seatSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 17, Short.MAX_VALUE))))
        );
        roomTabLayout.setVerticalGroup(
            roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomLabel)
                    .addComponent(roomNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seatLabel)
                    .addComponent(seatSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteRoomButton)
                    .addComponent(listRoomsButton)
                    .addComponent(addRoomButton))
                .addGap(18, 18, 18)
                .addComponent(roomStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );

        waitlistPanel.addTab("Rooms", roomTab);

        facultyLabel.setText("Faculty Name: ");

        facultyNameField.setColumns(20);

        addFacultyButton.setText("Add Faculty");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        listFacultyButton.setText("List Faculty");
        listFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listFacultyButtonActionPerformed(evt);
            }
        });

        deleteFacultyButton.setText("Delete Faculty");
        deleteFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFacultyButtonActionPerformed(evt);
            }
        });

        facultyStatusLabel.setText("    ");
        facultyStatusLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout facultyTabLayout = new javax.swing.GroupLayout(facultyTab);
        facultyTab.setLayout(facultyTabLayout);
        facultyTabLayout.setHorizontalGroup(
            facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(facultyStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(facultyTabLayout.createSequentialGroup()
                        .addGap(0, 139, Short.MAX_VALUE)
                        .addComponent(deleteFacultyButton)
                        .addGap(18, 18, 18)
                        .addComponent(listFacultyButton)
                        .addGap(18, 18, 18)
                        .addComponent(addFacultyButton))
                    .addGroup(facultyTabLayout.createSequentialGroup()
                        .addComponent(facultyLabel)
                        .addGap(18, 18, 18)
                        .addComponent(facultyNameField)))
                .addContainerGap())
        );
        facultyTabLayout.setVerticalGroup(
            facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyLabel)
                    .addComponent(facultyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFacultyButton)
                    .addComponent(listFacultyButton)
                    .addComponent(deleteFacultyButton))
                .addGap(18, 18, 18)
                .addComponent(facultyStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addContainerGap())
        );

        waitlistPanel.addTab("Faculty", facultyTab);

        facultyReserveLabel.setText("Faculty: ");

        dateReserveLabel.setText("Date: ");

        seatReserveLabel.setText("Seats Required: ");

        reserveSubmitButton.setText("Submit");
        reserveSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitButtonActionPerformed(evt);
            }
        });

        reserveStatusLabel.setText("   ");
        reserveStatusLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout reserveTabLayout = new javax.swing.GroupLayout(reserveTab);
        reserveTab.setLayout(reserveTabLayout);
        reserveTabLayout.setHorizontalGroup(
            reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reserveTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(reserveStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reserveSubmitButton)
                    .addGroup(reserveTabLayout.createSequentialGroup()
                        .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(facultyReserveLabel)
                            .addComponent(dateReserveLabel)
                            .addComponent(seatReserveLabel))
                        .addGap(18, 18, 18)
                        .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seatReserveSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reserveTabLayout.setVerticalGroup(
            reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reserveTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyReserveLabel)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateReserveLabel)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seatReserveLabel)
                    .addComponent(seatReserveSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reserveSubmitButton)
                .addGap(18, 18, 18)
                .addComponent(reserveStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Reserve Room", reserveTab);

        statusFacultyLabel.setText("Faculty: ");

        statusDateLabel.setText("Date: ");

        statusSubmitFacultyButton.setText("Submit Faculty");
        statusSubmitFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusSubmitFacultyButtonActionPerformed(evt);
            }
        });

        statusSubmitDateButton.setText("Submit Date");
        statusSubmitDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusSubmitDateButtonActionPerformed(evt);
            }
        });

        statusSubmitButton.setText("Check All");
        statusSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusSubmitButtonActionPerformed(evt);
            }
        });

        statusLabel.setText("   ");
        statusLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        reservationStatusLabel.setText("   ");
        reservationStatusLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        waitlistStatusLabel.setText("   ");
        waitlistStatusLabel.setToolTipText("");
        waitlistStatusLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout statusTabLayout = new javax.swing.GroupLayout(statusTab);
        statusTab.setLayout(statusTabLayout);
        statusTabLayout.setHorizontalGroup(
            statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(waitlistScrollPane)
                    .addComponent(reservationScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusTabLayout.createSequentialGroup()
                        .addGap(0, 136, Short.MAX_VALUE)
                        .addComponent(statusSubmitButton)
                        .addGap(18, 18, 18)
                        .addComponent(statusSubmitDateButton)
                        .addGap(23, 23, 23)
                        .addComponent(statusSubmitFacultyButton))
                    .addGroup(statusTabLayout.createSequentialGroup()
                        .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusFacultyLabel)
                            .addComponent(statusDateLabel))
                        .addGap(18, 18, 18)
                        .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusDateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statusFacultyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(waitlistStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservationStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        statusTabLayout.setVerticalGroup(
            statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusFacultyLabel)
                    .addComponent(statusFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusDateLabel)
                    .addComponent(statusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusSubmitFacultyButton)
                    .addComponent(statusSubmitDateButton)
                    .addComponent(statusSubmitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(statusLabel)
                .addGap(18, 18, 18)
                .addComponent(reservationStatusLabel)
                .addGap(18, 18, 18)
                .addComponent(reservationScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(waitlistStatusLabel)
                .addGap(18, 18, 18)
                .addComponent(waitlistScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        waitlistPanel.addTab("Status", statusTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(waitlistPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waitlistPanel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addFacultyButtonActionPerformed
    {//GEN-HEADEREND:event_addFacultyButtonActionPerformed
        // Add the faculty to the faculty table.
        String name = facultyNameField.getText();
        if (Faculty.addFaculty(name)) {
            facultyStatusLabel.setText(name+" has been added to the faculty table.");
        } else {
            facultyStatusLabel.setText(name+" could not be added to the faculty table.");
        }
        
        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void deleteFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFacultyButtonActionPerformed
        // Delete the faculty to the faculty table
        String name = facultyNameField.getText();
        if (Faculty.deleteFaculty(name)) {
            facultyStatusLabel.setText("<html>"+name+" has been removed from the faculty table.<br/>");
            ArrayList<ReservationEntry> reservations = ReservationEntryQueries.getReservationsByFaculty(name);
            if (!reservations.isEmpty()) {
                reservations.forEach((reservation) -> {
                    ReservationEntryQueries.deleteReservation(reservation);
                    RoomEntry room = reservation.getRoom();
                    Date date = reservation.getDate();
                    ArrayList<WaitlistEntry> waitlist = WaitlistEntryQueries.getWaitlistByDate(date);
                    for (WaitlistEntry entry : waitlist) {
                        if (entry.getSeats() <= room.getSeats()) {
                            ReservationEntryQueries.addReservation(new ReservationEntry(entry.getFaculty(), room, date));
                            WaitlistEntryQueries.deleteWaitlistEntry(entry);
                            facultyStatusLabel.setText(facultyStatusLabel.getText()+"Reserved "+room.getName()+" for "+entry.getFaculty()+" on "+date+".<br/>");
                            break;
                        }
                    }
                });
                facultyStatusLabel.setText(facultyStatusLabel.getText()+"All reservations for "+name+" have been removed.</html>");
            }
        } else {
            facultyStatusLabel.setText(name+" could not be removed from the faculty table.");
        }
        
        // Rebuild the reservation faculty combo box
        rebuildFacultyComboBoxes();
    }//GEN-LAST:event_deleteFacultyButtonActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // Add the date to the date table
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(dateSpinner.getValue());
        Date date = Date.valueOf(spinnerValue);
        if (Dates.addDate(date)) {
            dateStatusLabel.setText(date+" has been added to the dates table.");
        } else {
            dateStatusLabel.setText(date+" could not be added to the dates table.");
        }
        
        // Rebuild date combo box
        rebuildDateComboBoxes();
    }//GEN-LAST:event_addDateButtonActionPerformed

    private void deleteDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDateButtonActionPerformed
        // Remove the date from the date table
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(dateSpinner.getValue());
        Date date = Date.valueOf(spinnerValue);
        if (Dates.deleteDate(date)) {
            dateStatusLabel.setText("<html>"+date+" has been removed from the dates table.");
            
            ArrayList<ReservationEntry> reservations = ReservationEntryQueries.getReservationsByDate(date);
            reservations.forEach((reservation) -> {
                ReservationEntryQueries.deleteReservation(reservation);
            });

            ArrayList<WaitlistEntry> waitlist = WaitlistEntryQueries.getWaitlistByDate(date);
            waitlist.forEach((entry) -> {
                WaitlistEntryQueries.deleteWaitlistEntry(entry);
            });

            dateStatusLabel.setText(dateStatusLabel.getText()+"<br/>All waitlist and reservations for "+date+" have been removed.</html>");
        } else {
            dateStatusLabel.setText(date+" could not be removed from the dates table.");
        }
        
        // Rebuild date combo box
        rebuildDateComboBoxes();
    }//GEN-LAST:event_deleteDateButtonActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // Add the room to the room table
        RoomEntry room = new RoomEntry(roomNameField.getText(), (Integer) seatSpinner.getValue());
        if (RoomEntryQueries.addRoom(room)) {
            roomStatusLabel.setText("<html>"+room.getName()+" has been added to the room table.<br/>");
            ArrayList<Date> dates = Dates.getDateList();
            dates.forEach((date) -> {
                ArrayList<WaitlistEntry> waitlist = WaitlistEntryQueries.getWaitlistByDate(date);
                for (WaitlistEntry entry : waitlist) {
                    if (entry.getSeats() <= room.getSeats()) {
                        ReservationEntryQueries.addReservation(new ReservationEntry(entry.getFaculty(), room, date));
                        WaitlistEntryQueries.deleteWaitlistEntry(entry);
                        roomStatusLabel.setText(roomStatusLabel.getText()+"Reserved "+room.getName()+" for "+entry.getFaculty()+" on "+date+".<br/>");
                        break;
                    }
                }
            });
            roomStatusLabel.setText(roomStatusLabel.getText()+"</html>");
        } else {
            roomStatusLabel.setText(room.getName()+" could not be added to the room table.");
        }
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void deleteRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoomButtonActionPerformed
        // Remove room from room table
        RoomEntry room = RoomEntryQueries.getRoom(roomNameField.getText());
        if (RoomEntryQueries.deleteRoom(room)) {
            roomStatusLabel.setText("<html>"+room.getName()+" has been removed from the room table.<br/>");
            ArrayList<ReservationEntry> reservations = ReservationEntryQueries.getReservationsByRoom(room);
            if (!reservations.isEmpty()) {
                for (ReservationEntry reservation : reservations) {
                    ReservationEntryQueries.deleteReservation(reservation);
                    Date date = reservation.getDate();
                    String faculty = reservation.getFaculty();
                    Integer seatsReq = reservation.getRoom().getSeats();
                    ArrayList<RoomEntry> reservedRooms = ReservationEntryQueries.getRoomsByDate(date);
                    ArrayList<RoomEntry> possibleRooms = RoomEntryQueries.getRooms();
                    Integer minSeats = Integer.MAX_VALUE;

                    reservedRooms.forEach((reservedRoom) -> {
                        new ArrayList<>(possibleRooms).forEach((possibleRoom) -> {
                            if (reservedRoom.getName().equals(possibleRoom.getName())) {
                                possibleRooms.remove(possibleRoom);
                            }
                        });
                    });

                    for (RoomEntry posRoom : new ArrayList<>(possibleRooms)) {
                        Integer seats = posRoom.getSeats();
                        if (seats < seatsReq) {
                            possibleRooms.remove(posRoom);
                        } else if (seats < minSeats) {
                            Collections.swap(possibleRooms, 0, possibleRooms.indexOf(posRoom));
                            minSeats = seats;
                        }
                    }

                    if (possibleRooms.size() > 0) {
                        if (ReservationEntryQueries.addReservation(new ReservationEntry(faculty, possibleRooms.get(0), date))) {
                            roomStatusLabel.setText(roomStatusLabel.getText()+possibleRooms.get(0).getName()+" reserved for "+faculty+" on "+date.toString()+"<br/>");
                        } else {
                            roomStatusLabel.setText(roomStatusLabel.getText()+"An error occured while reserving the room for "+faculty+"<br/>");
                        }
                    } else {
                        if (WaitlistEntryQueries.addWaitlistEntry(new WaitlistEntry(faculty, date, seatsReq))) {
                            roomStatusLabel.setText(roomStatusLabel.getText()+"No rooms available for "+seatsReq+"<br/>"+faculty+" waitlisted for "+date.toString()+"<br/>");
                        } else {
                            roomStatusLabel.setText(roomStatusLabel.getText()+faculty+" is already waitlisted for "+date.toString()+"<br/>");
                        }
                    }
                }
            }
            roomStatusLabel.setText(roomStatusLabel.getText()+"</html>");
        } else {
            roomStatusLabel.setText(room.getName()+" could not be removed from the room table.");
        }
    }//GEN-LAST:event_deleteRoomButtonActionPerformed

    private void reserveSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitButtonActionPerformed
        Date date = (Date) reserveDateComboBox.getSelectedItem();
        String faculty = (String) reserveFacultyComboBox.getSelectedItem();
        Integer seatsReq = (Integer) seatReserveSpinner.getValue();
        ArrayList<RoomEntry> reservedRooms = ReservationEntryQueries.getRoomsByDate(date);
        ArrayList<RoomEntry> possibleRooms = RoomEntryQueries.getRooms();
        Integer minSeats = Integer.MAX_VALUE;
        
        reservedRooms.forEach((reservedRoom) -> {
            new ArrayList<>(possibleRooms).forEach((possibleRoom) -> {
                if (reservedRoom.getName().equals(possibleRoom.getName())) {
                    possibleRooms.remove(possibleRoom);
                }
            });
        });

        for (RoomEntry room : new ArrayList<>(possibleRooms)) {
            Integer seats = room.getSeats();
            if (seats < seatsReq) {
                possibleRooms.remove(room);
            } else if (seats < minSeats) {
                Collections.swap(possibleRooms, 0, possibleRooms.indexOf(room));
                minSeats = seats;
            }
        }
        
        if (possibleRooms.size() > 0) {
            if (ReservationEntryQueries.addReservation(new ReservationEntry(faculty, possibleRooms.get(0), date))) {
                reserveStatusLabel.setText(possibleRooms.get(0).getName()+" reserved for "+faculty+" on "+date.toString());
            } else {
                reserveStatusLabel.setText("An error occured while reserving the room");
            }
        } else {
            if (WaitlistEntryQueries.addWaitlistEntry(new WaitlistEntry(faculty, date, seatsReq))) {
                reserveStatusLabel.setText("<html>No rooms available for "+seatsReq+"<br/>"+faculty+" waitlisted for "+date.toString());
            } else {
                reserveStatusLabel.setText(faculty+" is already waitlisted for "+date.toString());
            }
        }

    }//GEN-LAST:event_reserveSubmitButtonActionPerformed

    private void listDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listDateButtonActionPerformed
        ArrayList<Date> dates = Dates.getDateList();
        dateStatusLabel.setText("<html>Reservable Dates are:<br/>");
        dates.forEach((date) -> {
            dateStatusLabel.setText(dateStatusLabel.getText() + date + "<br/>");
        });
        dateStatusLabel.setText(dateStatusLabel.getText() + "</html>");
    }//GEN-LAST:event_listDateButtonActionPerformed

    private void listFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listFacultyButtonActionPerformed
        ArrayList<String> faculty = Faculty.getFacultyList();
        facultyStatusLabel.setText("<html>Available Faculty are:<br/>");
        faculty.forEach((name) -> {
            facultyStatusLabel.setText(facultyStatusLabel.getText() + name + "<br/>");
        });
        facultyStatusLabel.setText(facultyStatusLabel.getText() + "</html>");
    }//GEN-LAST:event_listFacultyButtonActionPerformed

    private void listRoomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRoomsButtonActionPerformed
        ArrayList<RoomEntry> rooms = RoomEntryQueries.getRooms();
        roomStatusLabel.setText("<html>Reservable Rooms are:<br/>");
        rooms.forEach((room) -> {
            roomStatusLabel.setText(roomStatusLabel.getText() + room.getName() + " with " + room.getSeats() + " seats<br/>");
        });
        roomStatusLabel.setText(roomStatusLabel.getText() + "</html>");
    }//GEN-LAST:event_listRoomsButtonActionPerformed

    private void statusSubmitFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusSubmitFacultyButtonActionPerformed
        String faculty = (String) statusFacultyComboBox.getSelectedItem();
        ArrayList<ReservationEntry> reservations = ReservationEntryQueries.getReservationsByFaculty(faculty);
        ArrayList<WaitlistEntry> waitlist = WaitlistEntryQueries.getWaitlistByFaculty(faculty);
        reservationStatusLabel.setText("Reservations for "+faculty+":");
        
        JPanel reservationScrollPanel = new JPanel(new GridLayout(0,2,10,10));
        reservations.forEach((reservation) -> {
            JLabel label = new JLabel("On "+reservation.getDate().toString()+" in "+reservation.getRoom().getName());
            JButton button = new JButton("Cancel Reservation");
            button.addActionListener((java.awt.event.ActionEvent e) -> {
                ReservationEntryQueries.deleteReservation(reservation);
                ArrayList<WaitlistEntry> waitlistDate = WaitlistEntryQueries.getWaitlistByDate(reservation.getDate());
                for (WaitlistEntry entry : waitlistDate) {
                    if(entry.getSeats() <= reservation.getRoom().getSeats()) {
                        if (ReservationEntryQueries.addReservation(new ReservationEntry(entry.getFaculty(), reservation.getRoom(), reservation.getDate()))) {
                            statusLabel.setText(reservation.getRoom().getName()+" reserved for "+entry.getFaculty()+" on "+reservation.getDate().toString());
                            WaitlistEntryQueries.deleteWaitlistEntry(entry);
                            break;
                        } else {
                            statusLabel.setText("An error occured while reserving the room.");
                        }
                    }
                }
                statusSubmitFacultyButtonActionPerformed(null);
            });
            reservationScrollPanel.add(label);
            reservationScrollPanel.add(button);
        });
        reservationScrollPane.setViewportView(reservationScrollPanel);
        reservationScrollPane.revalidate();
        reservationScrollPane.repaint();
        
        waitlistStatusLabel.setText("Waitlist items for "+faculty+":");
        JPanel waitlistScrollPanel = new JPanel(new GridLayout(0,2,10,10));
        waitlist.forEach((entry) -> {
            JLabel label = new JLabel("On "+entry.getDate().toString()+" for " + entry.getSeats());
            JButton button = new JButton("Remove Waitlist");
            button.addActionListener((java.awt.event.ActionEvent e) -> {
                WaitlistEntryQueries.deleteWaitlistEntry(entry);
                statusSubmitFacultyButtonActionPerformed(null);
            });
            waitlistScrollPanel.add(label);
            waitlistScrollPanel.add(button);
        });
        waitlistScrollPane.setViewportView(waitlistScrollPanel);
        waitlistScrollPane.revalidate();
        waitlistScrollPane.repaint();
    }//GEN-LAST:event_statusSubmitFacultyButtonActionPerformed

    private void statusSubmitDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusSubmitDateButtonActionPerformed
        Date date = (Date) statusDateComboBox.getSelectedItem();
        ArrayList<ReservationEntry> reservations = ReservationEntryQueries.getReservationsByDate(date);
        ArrayList<WaitlistEntry> waitlist = WaitlistEntryQueries.getWaitlistByDate(date);
        
        reservationStatusLabel.setText("Reservations on "+date.toString()+":");
        JPanel reservationScrollPanel = new JPanel(new GridLayout(0,2,10,10));
        reservations.forEach((reservation) -> {
            JLabel label = new JLabel("For "+reservation.getFaculty()+" in "+reservation.getRoom().getName());
            JButton button = new JButton("Cancel Reservation");
            button.addActionListener((java.awt.event.ActionEvent e) -> {
                ReservationEntryQueries.deleteReservation(reservation);
                for (WaitlistEntry entry : waitlist) {
                    if(entry.getSeats() <= reservation.getRoom().getSeats()) {
                        if (ReservationEntryQueries.addReservation(new ReservationEntry(entry.getFaculty(), reservation.getRoom(), date))) {
                            statusLabel.setText(reservation.getRoom().getName()+" reserved for "+entry.getFaculty()+" on "+date.toString());
                            WaitlistEntryQueries.deleteWaitlistEntry(entry);
                            break;
                        } else {
                            statusLabel.setText("An error occured while reserving the room.");
                        }
                    }
                }
                statusSubmitDateButtonActionPerformed(null);
            });
            reservationScrollPanel.add(label);
            reservationScrollPanel.add(button);
        });
        reservationScrollPane.setViewportView(reservationScrollPanel);
        reservationScrollPane.revalidate();
        reservationScrollPane.repaint();
        
        waitlistStatusLabel.setText("Waitlist items on "+date.toString()+":");
        JPanel waitlistScrollPanel = new JPanel(new GridLayout(0,2,10,10));
        waitlist.forEach((entry) -> {
            JLabel label = new JLabel("For "+entry.getFaculty()+" for "+entry.getSeats());
            JButton button = new JButton("Remove Waitlist");
            button.addActionListener((java.awt.event.ActionEvent e) -> {
                WaitlistEntryQueries.deleteWaitlistEntry(entry);
                statusSubmitDateButtonActionPerformed(null);
            });
            waitlistScrollPanel.add(label);
            waitlistScrollPanel.add(button);
        });
        waitlistScrollPane.setViewportView(waitlistScrollPanel);
        waitlistScrollPane.revalidate();
        waitlistScrollPane.repaint();
    }//GEN-LAST:event_statusSubmitDateButtonActionPerformed

    private void statusSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusSubmitButtonActionPerformed
    ArrayList<ReservationEntry> reservations = ReservationEntryQueries.getReservations();
    ArrayList<WaitlistEntry> waitlist = WaitlistEntryQueries.getWaitlist();
        
    reservationStatusLabel.setText("Reservations:");
    JPanel reservationScrollPanel = new JPanel(new GridLayout(0,2,10,10));
    reservations.forEach((reservation) -> {
        JLabel label = new JLabel("For "+reservation.getFaculty()+" in "+reservation.getRoom().getName()+" on "+reservation.getDate().toString());
        JButton button = new JButton("Cancel Reservation");
        button.addActionListener((java.awt.event.ActionEvent e) -> {
            ReservationEntryQueries.deleteReservation(reservation);
            for (WaitlistEntry entry : waitlist) {
                if(entry.getSeats() <= reservation.getRoom().getSeats()) {
                    if (ReservationEntryQueries.addReservation(new ReservationEntry(entry.getFaculty(), reservation.getRoom(), reservation.getDate()))) {
                        statusLabel.setText(reservation.getRoom().getName()+" reserved for "+entry.getFaculty()+" on "+reservation.getDate().toString());
                        WaitlistEntryQueries.deleteWaitlistEntry(entry);
                        break;
                    } else {
                        statusLabel.setText("An error occured while reserving the room.");
                    }
                }
            }
            statusSubmitButtonActionPerformed(null);
        });
        reservationScrollPanel.add(label);
        reservationScrollPanel.add(button);
    });
    reservationScrollPane.setViewportView(reservationScrollPanel);
    reservationScrollPane.revalidate();
    reservationScrollPane.repaint();

    waitlistStatusLabel.setText("Waitlist items:");
    JPanel waitlistScrollPanel = new JPanel(new GridLayout(0,2,10,10));
    waitlist.forEach((entry) -> {
        JLabel label = new JLabel("For "+entry.getFaculty()+" for "+entry.getSeats()+" on "+entry.getDate().toString());
        JButton button = new JButton("Remove Waitlist");
        button.addActionListener((java.awt.event.ActionEvent e) -> {
            WaitlistEntryQueries.deleteWaitlistEntry(entry);
            statusSubmitButtonActionPerformed(null);
        });
        waitlistScrollPanel.add(label);
        waitlistScrollPanel.add(button);
    });
    waitlistScrollPane.setViewportView(waitlistScrollPanel);
    waitlistScrollPane.revalidate();
    waitlistScrollPane.repaint();
    }//GEN-LAST:event_statusSubmitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new RoomSchedulerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDateButton;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateReserveLabel;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JLabel dateStatusLabel;
    private javax.swing.JPanel dateTab;
    private javax.swing.JButton deleteDateButton;
    private javax.swing.JButton deleteFacultyButton;
    private javax.swing.JButton deleteRoomButton;
    private javax.swing.JLabel facultyLabel;
    private javax.swing.JTextField facultyNameField;
    private javax.swing.JLabel facultyReserveLabel;
    private javax.swing.JLabel facultyStatusLabel;
    private javax.swing.JPanel facultyTab;
    private javax.swing.JButton listDateButton;
    private javax.swing.JButton listFacultyButton;
    private javax.swing.JButton listRoomsButton;
    private javax.swing.JScrollPane reservationScrollPane;
    private javax.swing.JLabel reservationStatusLabel;
    private javax.swing.JComboBox<String> reserveDateComboBox;
    private javax.swing.JComboBox<String> reserveFacultyComboBox;
    private javax.swing.JLabel reserveStatusLabel;
    private javax.swing.JButton reserveSubmitButton;
    private javax.swing.JPanel reserveTab;
    private javax.swing.JLabel roomLabel;
    private javax.swing.JTextField roomNameField;
    private javax.swing.JLabel roomStatusLabel;
    private javax.swing.JPanel roomTab;
    private javax.swing.JLabel seatLabel;
    private javax.swing.JLabel seatReserveLabel;
    private javax.swing.JSpinner seatReserveSpinner;
    private javax.swing.JSpinner seatSpinner;
    private javax.swing.JComboBox<String> statusDateComboBox;
    private javax.swing.JLabel statusDateLabel;
    private javax.swing.JComboBox<String> statusFacultyComboBox;
    private javax.swing.JLabel statusFacultyLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton statusSubmitButton;
    private javax.swing.JButton statusSubmitDateButton;
    private javax.swing.JButton statusSubmitFacultyButton;
    private javax.swing.JPanel statusTab;
    private javax.swing.JLabel title;
    private javax.swing.JTabbedPane waitlistPanel;
    private javax.swing.JScrollPane waitlistScrollPane;
    private javax.swing.JLabel waitlistStatusLabel;
    // End of variables declaration//GEN-END:variables
}


import Classes.ReservationEntry;
import Classes.RoomEntry;
import Classes.WaitlistEntry;
import Queries.Dates;
import Queries.RoomEntryQueries;
import Queries.Faculty;
import Queries.ReservationEntryQueries;
import Queries.WaitlistEntryQueries;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author acv
 */
public class RoomSchedulerFrame extends javax.swing.JFrame
{

    
    /**
     * Creates new form RoomSchedulerFrame
     */
    public RoomSchedulerFrame()
    {
        initComponents();
        
        // Load the combo boxes with data.
        rebuildFacultyComboBoxes();
        rebuildDateComboBoxes();
    }
    
    public void rebuildFacultyComboBoxes() {
        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
        statusFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
    }
    
    public void rebuildDateComboBoxes() {
        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDateList().toArray()));
        statusDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDateList().toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        waitlistPanel = new javax.swing.JTabbedPane();
        dateTab = new javax.swing.JPanel();
        dateLabel = new javax.swing.JLabel();
        dateSpinner = new javax.swing.JSpinner();
        addDateButton = new javax.swing.JButton();
        listDateButton = new javax.swing.JButton();
        deleteDateButton = new javax.swing.JButton();
        dateStatusLabel = new javax.swing.JLabel();
        facultyTab = new javax.swing.JPanel();
        facultyLabel = new javax.swing.JLabel();
        facultyNameField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        listFacultyButton = new javax.swing.JButton();
        deleteFacultyButton = new javax.swing.JButton();
        facultyStatusLabel = new javax.swing.JLabel();
        roomTab = new javax.swing.JPanel();
        roomLabel = new javax.swing.JLabel();
        roomNameField = new javax.swing.JTextField();
        seatLabel = new javax.swing.JLabel();
        seatSpinner = new javax.swing.JSpinner();
        addRoomButton = new javax.swing.JButton();
        listRoomsButton = new javax.swing.JButton();
        deleteRoomButton = new javax.swing.JButton();
        roomStatusLabel = new javax.swing.JLabel();
        reserveTab = new javax.swing.JPanel();
        facultyReserveLabel = new javax.swing.JLabel();
        reserveFacultyComboBox = new javax.swing.JComboBox<>();
        dateReserveLabel = new javax.swing.JLabel();
        reserveDateComboBox = new javax.swing.JComboBox<>();
        seatReserveLabel = new javax.swing.JLabel();
        seatReserveSpinner = new javax.swing.JSpinner();
        reserveSubmitButton = new javax.swing.JButton();
        reserveStatusLabel = new javax.swing.JLabel();
        statusTab = new javax.swing.JPanel();
        statusFacultyLabel = new javax.swing.JLabel();
        statusFacultyComboBox = new javax.swing.JComboBox<>();
        statusDateLabel = new javax.swing.JLabel();
        statusDateComboBox = new javax.swing.JComboBox<>();
        statusSubmitFacultyButton = new javax.swing.JButton();
        statusSubmitDateButton = new javax.swing.JButton();
        statusStatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        title.setForeground(new java.awt.Color(204, 0, 0));
        title.setText("Room Scheduler");

        dateLabel.setText("Date:");

        dateSpinner.setModel(new javax.swing.SpinnerDateModel());

        addDateButton.setText("Add Date");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        listDateButton.setText("List Dates");
        listDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listDateButtonActionPerformed(evt);
            }
        });

        deleteDateButton.setText("Delete Date");
        deleteDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDateButtonActionPerformed(evt);
            }
        });

        dateStatusLabel.setText("    ");

        javax.swing.GroupLayout dateTabLayout = new javax.swing.GroupLayout(dateTab);
        dateTab.setLayout(dateTabLayout);
        dateTabLayout.setHorizontalGroup(
            dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(dateTabLayout.createSequentialGroup()
                        .addComponent(dateLabel)
                        .addGap(40, 40, 40)
                        .addGroup(dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(dateTabLayout.createSequentialGroup()
                                .addComponent(deleteDateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(listDateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addDateButton))
                            .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(294, 294, Short.MAX_VALUE))
        );
        dateTabLayout.setVerticalGroup(
            dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateTabLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(dateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteDateButton)
                    .addComponent(addDateButton)
                    .addComponent(listDateButton))
                .addGap(128, 128, 128)
                .addComponent(dateStatusLabel)
                .addContainerGap(243, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Dates", dateTab);

        facultyLabel.setText("Faculty Name: ");

        facultyNameField.setColumns(20);

        addFacultyButton.setText("Add Faculty");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        listFacultyButton.setText("List Faculty");
        listFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listFacultyButtonActionPerformed(evt);
            }
        });

        deleteFacultyButton.setText("Delete Faculty");
        deleteFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFacultyButtonActionPerformed(evt);
            }
        });

        facultyStatusLabel.setText("    ");

        javax.swing.GroupLayout facultyTabLayout = new javax.swing.GroupLayout(facultyTab);
        facultyTab.setLayout(facultyTabLayout);
        facultyTabLayout.setHorizontalGroup(
            facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(facultyStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(facultyTabLayout.createSequentialGroup()
                        .addComponent(facultyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(facultyTabLayout.createSequentialGroup()
                                .addComponent(deleteFacultyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listFacultyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addFacultyButton))
                            .addComponent(facultyNameField))))
                .addGap(76, 77, Short.MAX_VALUE))
        );
        facultyTabLayout.setVerticalGroup(
            facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyTabLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyLabel)
                    .addComponent(facultyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(facultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteFacultyButton)
                    .addComponent(addFacultyButton)
                    .addComponent(listFacultyButton))
                .addGap(124, 124, 124)
                .addComponent(facultyStatusLabel)
                .addContainerGap(250, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Faculty", facultyTab);

        roomLabel.setText("Room Name: ");

        roomNameField.setColumns(20);

        seatLabel.setText("Seats Available:");

        addRoomButton.setText("Add Room");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        listRoomsButton.setText("List Rooms");
        listRoomsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRoomsButtonActionPerformed(evt);
            }
        });

        deleteRoomButton.setText("Delete Room");
        deleteRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoomButtonActionPerformed(evt);
            }
        });

        roomStatusLabel.setText("    ");

        javax.swing.GroupLayout roomTabLayout = new javax.swing.GroupLayout(roomTab);
        roomTab.setLayout(roomTabLayout);
        roomTabLayout.setHorizontalGroup(
            roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(roomTabLayout.createSequentialGroup()
                        .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roomLabel)
                            .addComponent(seatLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(roomNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                            .addComponent(seatSpinner)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomTabLayout.createSequentialGroup()
                        .addComponent(deleteRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listRoomsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addRoomButton))
                    .addComponent(roomStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(76, 87, Short.MAX_VALUE))
        );
        roomTabLayout.setVerticalGroup(
            roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomTabLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomLabel)
                    .addComponent(roomNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seatLabel)
                    .addComponent(seatSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(roomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteRoomButton)
                    .addComponent(listRoomsButton)
                    .addComponent(addRoomButton))
                .addGap(107, 107, 107)
                .addComponent(roomStatusLabel)
                .addContainerGap(232, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Rooms", roomTab);

        facultyReserveLabel.setText("Faculty: ");

        dateReserveLabel.setText("Date: ");

        seatReserveLabel.setText("Seats Required: ");

        reserveSubmitButton.setText("Submit");
        reserveSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitButtonActionPerformed(evt);
            }
        });

        reserveStatusLabel.setText("   ");

        javax.swing.GroupLayout reserveTabLayout = new javax.swing.GroupLayout(reserveTab);
        reserveTab.setLayout(reserveTabLayout);
        reserveTabLayout.setHorizontalGroup(
            reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reserveTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(reserveSubmitButton)
                        .addGroup(reserveTabLayout.createSequentialGroup()
                            .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(facultyReserveLabel)
                                .addComponent(dateReserveLabel)
                                .addComponent(seatReserveLabel))
                            .addGap(18, 18, 18)
                            .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(reserveDateComboBox, 0, 299, Short.MAX_VALUE)
                                .addComponent(reserveFacultyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(seatReserveSpinner))))
                    .addComponent(reserveStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        reserveTabLayout.setVerticalGroup(
            reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reserveTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyReserveLabel)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateReserveLabel)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seatReserveLabel)
                    .addComponent(seatReserveSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(reserveSubmitButton)
                .addGap(18, 18, 18)
                .addComponent(reserveStatusLabel)
                .addContainerGap(286, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Reserve Room", reserveTab);

        statusFacultyLabel.setText("Faculty: ");

        statusDateLabel.setText("Date: ");

        statusSubmitFacultyButton.setText("Submit Faculty");
        statusSubmitFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusSubmitFacultyButtonActionPerformed(evt);
            }
        });

        statusSubmitDateButton.setText("Submit Date");
        statusSubmitDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusSubmitDateButtonActionPerformed(evt);
            }
        });

        statusStatusLabel.setText("   ");

        javax.swing.GroupLayout statusTabLayout = new javax.swing.GroupLayout(statusTab);
        statusTab.setLayout(statusTabLayout);
        statusTabLayout.setHorizontalGroup(
            statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(statusStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(statusTabLayout.createSequentialGroup()
                        .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusFacultyLabel)
                            .addComponent(statusDateLabel))
                        .addGap(36, 36, 36)
                        .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(statusTabLayout.createSequentialGroup()
                                .addComponent(statusSubmitDateButton)
                                .addGap(79, 79, 79)
                                .addComponent(statusSubmitFacultyButton))
                            .addComponent(statusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 105, Short.MAX_VALUE))
        );
        statusTabLayout.setVerticalGroup(
            statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusFacultyLabel)
                    .addComponent(statusFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusDateLabel)
                    .addComponent(statusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(statusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusSubmitFacultyButton)
                    .addComponent(statusSubmitDateButton))
                .addGap(68, 68, 68)
                .addComponent(statusStatusLabel)
                .addContainerGap(283, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Status", statusTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(waitlistPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waitlistPanel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addFacultyButtonActionPerformed
    {//GEN-HEADEREND:event_addFacultyButtonActionPerformed
        // Add the faculty to the faculty table.
        String name = facultyNameField.getText();
        if (Faculty.addFaculty(name)) {
            facultyStatusLabel.setText(name+" has been added to the faculty table.");
        } else {
            facultyStatusLabel.setText(name+" could not be added to the faculty table.");
        }
        
        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void deleteFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFacultyButtonActionPerformed
        // Delete the faculty to the faculty table
        String name = facultyNameField.getText();
        if (Faculty.deleteFaculty(name)) {
            facultyStatusLabel.setText(name+" has been removed from the faculty table.");
        } else {
            facultyStatusLabel.setText(name+" could not be removed from the faculty table.");
        }
        
        // Rebuild the reservation faculty combo box
        rebuildFacultyComboBoxes();
    }//GEN-LAST:event_deleteFacultyButtonActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // Add the date to the date table
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(dateSpinner.getValue());
        Date day = Date.valueOf(spinnerValue);
        if (Dates.addDate(day)) {
            dateStatusLabel.setText(day+" has been added to the dates table.");
        } else {
            dateStatusLabel.setText(day+" could not be added to the dates table.");
        }
        
        // Rebuild date combo box
        rebuildDateComboBoxes();
    }//GEN-LAST:event_addDateButtonActionPerformed

    private void deleteDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDateButtonActionPerformed
        // Remove the date from the date table
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(dateSpinner.getValue());
        Date day = Date.valueOf(spinnerValue);
        if (Dates.deleteDate(day)) {
            dateStatusLabel.setText(day+" has been removed from the dates table.");
        } else {
            dateStatusLabel.setText(day+" could not be removed from the dates table.");
        }
        
        // Rebuild date combo box
        rebuildDateComboBoxes();
    }//GEN-LAST:event_deleteDateButtonActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // Add the room to the room table
        RoomEntry room = new RoomEntry(roomNameField.getText(), (Integer) seatSpinner.getValue());
        if (RoomEntryQueries.addRoom(room)) {
            roomStatusLabel.setText(room.getName()+" has been added to the room table.");
        } else {
            roomStatusLabel.setText(room.getName()+" could not be added to the room table.");
        }
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void deleteRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoomButtonActionPerformed
        // Remove room from room table
        RoomEntry room = RoomEntryQueries.getRoom(roomNameField.getText());
        if (RoomEntryQueries.deleteRoom(room)) {
            roomStatusLabel.setText(room.getName()+" has been removed from the room table.");
        } else {
            roomStatusLabel.setText(room.getName()+" could not be removed from the room table.");
        }
    }//GEN-LAST:event_deleteRoomButtonActionPerformed

    private void reserveSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitButtonActionPerformed
        Date date = (Date) reserveDateComboBox.getSelectedItem();
        String faculty = (String) reserveFacultyComboBox.getSelectedItem();
        Integer seatsReq = (Integer) seatReserveSpinner.getValue();
        ArrayList<RoomEntry> reservedRooms = ReservationEntryQueries.getRoomsByDate(date);
        ArrayList<RoomEntry> possibleRooms = RoomEntryQueries.getRooms();
        Integer minSeats = Integer.MAX_VALUE;
        
        reservedRooms.forEach((reservedRoom) -> {
            new ArrayList<>(possibleRooms).forEach((possibleRoom) -> {
                if (reservedRoom.getName().equals(possibleRoom.getName())) {
                    possibleRooms.remove(possibleRoom);
                }
            });
        });

        for (RoomEntry room : new ArrayList<>(possibleRooms)) {
            Integer seats = room.getSeats();
            if (seats < seatsReq) {
                possibleRooms.remove(room);
            } else if (seats < minSeats) {
                Collections.swap(possibleRooms, 0, possibleRooms.indexOf(room));
                minSeats = seats;
            }
        }
        
        if (possibleRooms.size() > 0) {
            if (ReservationEntryQueries.addReservation(new ReservationEntry(faculty, possibleRooms.get(0), date))) {
                reserveStatusLabel.setText(possibleRooms.get(0).getName()+" reserved for "+faculty+" on "+date.toString());
            } else {
                reserveStatusLabel.setText("An error occured while reserving the room");
            }
        } else {
            if (WaitlistEntryQueries.addWaitlistEntry(new WaitlistEntry(faculty, date, seatsReq))) {
                reserveStatusLabel.setText("<html>No rooms available for "+seatsReq+"<br/>"+faculty+" waitlisted for "+date.toString());
            } else {
                reserveStatusLabel.setText(faculty+" is already waitlisted for "+date.toString());
            }
        }

    }//GEN-LAST:event_reserveSubmitButtonActionPerformed

    private void listDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listDateButtonActionPerformed
        ArrayList<Date> dates = Dates.getDateList();
        dateStatusLabel.setText("<html>Reservable Dates are:<br/>");
        dates.forEach((date) -> {
            dateStatusLabel.setText(dateStatusLabel.getText() + date + "<br/>");
        });
        dateStatusLabel.setText(dateStatusLabel.getText() + "</html>");
    }//GEN-LAST:event_listDateButtonActionPerformed

    private void listFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listFacultyButtonActionPerformed
        ArrayList<String> faculty = Faculty.getFacultyList();
        facultyStatusLabel.setText("<html>Available Faculty are:<br/>");
        faculty.forEach((name) -> {
            facultyStatusLabel.setText(facultyStatusLabel.getText() + name + "<br/>");
        });
        facultyStatusLabel.setText(facultyStatusLabel.getText() + "</html>");
    }//GEN-LAST:event_listFacultyButtonActionPerformed

    private void listRoomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRoomsButtonActionPerformed
        ArrayList<RoomEntry> rooms = RoomEntryQueries.getRooms();
        roomStatusLabel.setText("<html>Reservable Rooms are:<br/>");
        rooms.forEach((room) -> {
            roomStatusLabel.setText(roomStatusLabel.getText() + room.getName() + " with " + room.getSeats() + " seats<br/>");
        });
        roomStatusLabel.setText(roomStatusLabel.getText() + "</html>");
    }//GEN-LAST:event_listRoomsButtonActionPerformed

    private void statusSubmitFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusSubmitFacultyButtonActionPerformed
        String faculty = (String) statusFacultyComboBox.getSelectedItem();
        ArrayList<ReservationEntry> reservations = ReservationEntryQueries.getReservationsByFaculty(faculty);
        ArrayList<WaitlistEntry> waitlist = WaitlistEntryQueries.getWaitlistByFaculty(faculty);
        statusStatusLabel.setText("<html>Reservations for "+faculty+":<br/>");
        reservations.forEach((reservation) -> {
            statusStatusLabel.setText(statusStatusLabel.getText()+"On "+reservation.getDate().toString()+" in "+reservation.getRoom().getName()+"<br/>");
        });
        statusStatusLabel.setText(statusStatusLabel.getText()+"<br/>Waitlist items for "+faculty+":<br/>");
        waitlist.forEach((waitItem) -> {
            statusStatusLabel.setText(statusStatusLabel.getText()+"On "+waitItem.getDate().toString()+" for "+waitItem.getSeats()+" seats<br/>");
        });
    }//GEN-LAST:event_statusSubmitFacultyButtonActionPerformed

    private void statusSubmitDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusSubmitDateButtonActionPerformed
        Date date = (Date) statusDateComboBox.getSelectedItem();
        ArrayList<ReservationEntry> reservations = ReservationEntryQueries.getReservationsByDate(date);
        ArrayList<WaitlistEntry> waitlist = WaitlistEntryQueries.getWaitlistByDate(date);
        statusStatusLabel.setText("<html>Reservations on "+date.toString()+":<br/>");
        reservations.forEach((reservation) -> {
            statusStatusLabel.setText(statusStatusLabel.getText()+"For "+reservation.getFaculty()+" in "+reservation.getRoom().getName()+"<br/>");
        });
        statusStatusLabel.setText(statusStatusLabel.getText()+"<br/>Waitlist items on "+date.toString()+":<br/>");
        waitlist.forEach((waitItem) -> {
            statusStatusLabel.setText(statusStatusLabel.getText()+"For "+waitItem.getFaculty()+" for "+waitItem.getSeats()+" seats<br/>");
        });
    }//GEN-LAST:event_statusSubmitDateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new RoomSchedulerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDateButton;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateReserveLabel;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JLabel dateStatusLabel;
    private javax.swing.JPanel dateTab;
    private javax.swing.JButton deleteDateButton;
    private javax.swing.JButton deleteFacultyButton;
    private javax.swing.JButton deleteRoomButton;
    private javax.swing.JLabel facultyLabel;
    private javax.swing.JTextField facultyNameField;
    private javax.swing.JLabel facultyReserveLabel;
    private javax.swing.JLabel facultyStatusLabel;
    private javax.swing.JPanel facultyTab;
    private javax.swing.JButton listDateButton;
    private javax.swing.JButton listFacultyButton;
    private javax.swing.JButton listRoomsButton;
    private javax.swing.JComboBox<String> reserveDateComboBox;
    private javax.swing.JComboBox<String> reserveFacultyComboBox;
    private javax.swing.JLabel reserveStatusLabel;
    private javax.swing.JButton reserveSubmitButton;
    private javax.swing.JPanel reserveTab;
    private javax.swing.JLabel roomLabel;
    private javax.swing.JTextField roomNameField;
    private javax.swing.JLabel roomStatusLabel;
    private javax.swing.JPanel roomTab;
    private javax.swing.JLabel seatLabel;
    private javax.swing.JLabel seatReserveLabel;
    private javax.swing.JSpinner seatReserveSpinner;
    private javax.swing.JSpinner seatSpinner;
    private javax.swing.JComboBox<String> statusDateComboBox;
    private javax.swing.JLabel statusDateLabel;
    private javax.swing.JComboBox<String> statusFacultyComboBox;
    private javax.swing.JLabel statusFacultyLabel;
    private javax.swing.JLabel statusStatusLabel;
    private javax.swing.JButton statusSubmitDateButton;
    private javax.swing.JButton statusSubmitFacultyButton;
    private javax.swing.JPanel statusTab;
    private javax.swing.JLabel title;
    private javax.swing.JTabbedPane waitlistPanel;
    // End of variables declaration//GEN-END:variables
}
